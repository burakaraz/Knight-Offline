
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;

import static java.lang.Math.abs;

import java.util.ArrayList;
import java.util.Timer;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : @Knight Ofline
//  @ File Name : Mage.java
//  @ Date : @31.03.2015
//  @ Author : @Burak Araz
//
//
public class Mage extends BasicKnight {

    public int specSig = 0;

    public Mage(int id, int xPos, int yPos, int hitPoint, int score,
            int speed, int health, Strategy strategy, int team, int type, Knight target) {
        super(id, xPos, yPos, hitPoint, score, speed, health, strategy, team, type, target);
        // TODO Auto-generated constructor stub
    }

    @Override
    public void draw(Graphics g) {
        // TODO Auto-generated method stub
        Graphics2D g2d = (Graphics2D) g.create();
        int xtopleft = this.getxPos();
        int ytopleft = this.getyPos();

        if (getTeam() == 0) {
            g2d.setColor(Color.RED);
        } else {
            g2d.setColor(Color.BLUE);
        }

        int[] x = new int[4];
        x[0] = xtopleft;
        x[1] = xtopleft + 20;
        x[2] = xtopleft + 40;
        x[3] = xtopleft + 20;
        int[] y = new int[4];
        y[0] = ytopleft + 20;
        y[1] = ytopleft + 40;
        y[2] = ytopleft + 20;
        y[3] = ytopleft;
        g2d.drawOval(xtopleft - 15, ytopleft - 15, 75, 75);
        g2d.drawPolygon(x, y, 4);
        g2d.fillPolygon(x, y, 4);

        String knightHealth = Integer.toString(getHealth());
        g.setColor(Color.WHITE);
        g.drawString(knightHealth, xtopleft + 10, ytopleft + 20);

        if (this.getTarget() != null) {
            int x1 = this.getxPos() - this.getTarget().getxPos();
            int y1 = this.getyPos() - this.getTarget().getyPos();
            x1 = x1 * x1;
            y1 = y1 * y1;
            if (Math.sqrt(x1 + y1) < 75) {
                g2d.drawLine(xtopleft + 20, ytopleft + 20, this.getTarget().getxPos() + 20, this.getTarget().getyPos() + 20);
            }
        }

        if (specSig == 1) {
            specSig = 0;
            Color color = new Color(1, 1, 0, 0.8f); //Red 
            g2d.setColor(color);
            g2d.drawOval(xtopleft - 30, ytopleft - 30, 100, 100);
            g2d.fillOval(xtopleft - 30, ytopleft - 30, 100, 100);
        }

    }

    public boolean checkPosNormalAttack(Knight k, Knight e) {

        Rectangle rectK = new Rectangle(k.getxPos(), k.getyPos(), 40, 40);
        Rectangle rectE = new Rectangle(e.getxPos(), e.getyPos(), 40, 40);
        if (rectK.intersects(rectE)) {
            return true;
        }
        return false;
    }

    @Override
    public boolean meleeAttack() {
        if (this.getTeam() == 0) {

            if (this.getTarget() != null) {
                int x = this.getxPos() - this.getTarget().getxPos();
                int y = this.getyPos() - this.getTarget().getyPos();
                x = x * x;
                y = y * y;
                if (Math.sqrt(x + y) < 75 && this.getFlag() == 0 && this.getTarget().getDead() == 0) {
                    this.setFlag(1);

                    if (this.getTarget().getHealth() <= 100) {
                        Simulation.getInstance().totalDamageK = Simulation.getInstance().totalDamageK + this.getTarget().getHealth();
                        this.getTarget().setHealth(0);
                        this.setScore(this.getScore() + 75);
                        if(Simulation.getInstance().highestPlayerK < this.getScore())
                        {
                            Simulation.getInstance().highestPlayerK = this.getScore();
                        }
                        Simulation.getInstance().setTotalScoreK(Simulation.getInstance().getTotalScoreK() + 75);
                    } else {
                        Simulation.getInstance().totalDamageK = Simulation.getInstance().totalDamageK + 100;
                        this.getTarget().setHealth(this.getTarget().getHealth() - 100);
                    }

                    if (this.getTarget().getHealth() <= 0) {
                        this.getTarget().setDead(1);
                        Display.getInstance().removeKnight(this.getTarget());
                        Simulation.getInstance().killsK = Simulation.getInstance().killsK + 1;
                        this.setTarget(null);
                    }
                    Simulation.getInstance().normSkillK++;
                    return true;
                }
            }
        }
        if (this.getTeam() == 1) {

            if (this.getTarget() != null) {
                int x = this.getxPos() - this.getTarget().getxPos();
                int y = this.getyPos() - this.getTarget().getyPos();
                x = x * x;
                y = y * y;

                if (Math.sqrt(x + y) < 75 && this.getFlag() == 0 && this.getTarget().getDead() == 0) {

                    this.setFlag(1);

                    if (this.getTarget().getHealth() <= 100) {
                        Simulation.getInstance().totalDamageE = Simulation.getInstance().totalDamageE + this.getTarget().getHealth();
                        this.getTarget().setHealth(0);
                        this.setScore(this.getScore() + 75);
                        if(Simulation.getInstance().highestPlayerE < this.getScore())
                        {
                            Simulation.getInstance().highestPlayerE = this.getScore();
                        }
                        Simulation.getInstance().setTotalScoreE(Simulation.getInstance().getTotalScoreE() + 75);
                    } else {
                        Simulation.getInstance().totalDamageE = Simulation.getInstance().totalDamageE + 100;
                        this.getTarget().setHealth(this.getTarget().getHealth() - 100);
                    }
                    if (this.getTarget().getHealth() <= 0) {
                        this.getTarget().setDead(1);
                        Display.getInstance().removeKnight(this.getTarget());
                        Simulation.getInstance().killsE = Simulation.getInstance().killsE + 1;
                        this.setTarget(null);
                    }
                    Simulation.getInstance().normSkillE++;
                    return true;
                }

            }
        }
        return false;
    }

    @Override
    public boolean rangedAttack() {
        ArrayList<Knight> attackList = new ArrayList<Knight>();
        if (this.getTeam() == 0) {
            for (int i = 0; i < Simulation.getInstance().getElmoradList().size(); i++) {
                int xdist = this.getxPos() - Simulation.getInstance().getElmoradList().get(i).getxPos();
                int ydist = this.getyPos() - Simulation.getInstance().getElmoradList().get(i).getyPos();
                xdist = xdist * xdist;
                ydist = ydist * ydist;
                if (Math.sqrt(xdist + ydist) < 100 && Simulation.getInstance().getElmoradList().get(i).getDead() == 0) {
                    attackList.add(Simulation.getInstance().getElmoradList().get(i));
                }
            }
            if (attackList.size() != 0 && this.getFlag() == 0) {
                this.setFlag(1);
                this.specSig = 1;
                for (int i = 0; i < attackList.size(); i++) {
                    if (attackList.get(i).getHealth() <= 75) {
                        Simulation.getInstance().totalDamageK = Simulation.getInstance().totalDamageK + attackList.get(i).getHealth();
                        this.setScore(this.getScore() + 75);
                        attackList.get(i).setHealth(0);
                        if(Simulation.getInstance().highestPlayerK < this.getScore())
                        {
                            Simulation.getInstance().highestPlayerK = this.getScore();
                        }
                        Simulation.getInstance().setTotalScoreK(Simulation.getInstance().getTotalScoreK() + 75);
                    } else {
                        Simulation.getInstance().totalDamageK = Simulation.getInstance().totalDamageK + 75;
                        attackList.get(i).setHealth(attackList.get(i).getHealth() - 75);
                    }
                    if (attackList.get(i).getHealth() <= 0) {
                        attackList.get(i).setDead(1);
                        Display.getInstance().removeKnight(attackList.get(i));
                        Simulation.getInstance().killsK = Simulation.getInstance().killsK + 1;
                        this.setTarget(null);
                    }

                }
                Simulation.getInstance().speckSkillK++;
            }
            return true;
        }
        if (this.getTeam() == 1) {
            for (int i = 0; i < Simulation.getInstance().getKarusList().size(); i++) {
                int xdist = this.getxPos() - Simulation.getInstance().getKarusList().get(i).getxPos();
                int ydist = this.getyPos() - Simulation.getInstance().getKarusList().get(i).getyPos();
                xdist = xdist * xdist;
                ydist = ydist * ydist;
                if (Math.sqrt(xdist + ydist) < 100 && Simulation.getInstance().getKarusList().get(i).getDead() == 0) {
                    attackList.add(Simulation.getInstance().getKarusList().get(i));
                }
            }
            if (attackList.size() != 0 && this.getFlag() == 0) {
                this.setFlag(1);
                this.specSig = 1;
                for (int i = 0; i < attackList.size(); i++) {
                    if (attackList.get(i).getHealth() <= 75) {
                        Simulation.getInstance().totalDamageE = Simulation.getInstance().totalDamageE + attackList.get(i).getHealth();
                        this.setScore(this.getScore() + 75);
                        attackList.get(i).setHealth(0);
                        if(Simulation.getInstance().highestPlayerE < this.getScore())
                        {
                            Simulation.getInstance().highestPlayerE = this.getScore();
                        }
                        Simulation.getInstance().setTotalScoreE(Simulation.getInstance().getTotalScoreE() + 75);
                    } else {
                        Simulation.getInstance().totalDamageE = Simulation.getInstance().totalDamageE + 75;
                        attackList.get(i).setHealth(attackList.get(i).getHealth() - 75);
                    }
                    if (attackList.get(i).getHealth() <= 0) {
                        attackList.get(i).setDead(1);
                        Display.getInstance().removeKnight(attackList.get(i));
                        Simulation.getInstance().killsE = Simulation.getInstance().killsE + 1;
                        this.setTarget(null);
                    }

                }
                Simulation.getInstance().speckSkillE++;
                return true;
            }
        }
        return false;
    }

    @Override
    public boolean healMe() {
        // TODO Auto-generated method stub
        if (400 - this.getHealth() < 75 && this.getHealth() != 400) {
            this.setHealth(this.getHealth() + (400 - this.getHealth()));
            return true;
        } else if (400 - this.getHealth() >= 75) {
            this.setHealth(this.getHealth() + 75);
            return true;
        }
        return false;
    }
}
