
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;

import static java.lang.Math.abs;

import java.util.Timer;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : @Knight Ofline
//  @ File Name : Rogue.java
//  @ Date : @31.03.2015
//  @ Author : @Burak Araz
//
//
public class Rogue extends BasicKnight {

    public int specSkill = 0;

    public Rogue(int id, int xPos, int yPos, int hitPoint, int score,
            int speed, int health, Strategy strategy, int team, int type, Knight target) {
        super(id, xPos, yPos, hitPoint, score, speed, health, strategy, team, type, target);
        // TODO Auto-generated constructor stub
    }

    @Override
    public void draw(Graphics g) {
        Graphics2D g2d = (Graphics2D) g.create();
        int xtopleft = this.getxPos();
        int ytopleft = this.getyPos();
        //int radius = this.getComponent().getRadius();

        if (specSkill == 1) {
            if (getTeam() == 0) {
                g2d.setColor(Color.RED.darker().darker());
            } else {
                g2d.setColor(Color.BLUE.darker().darker());
            }
        } else {
            if (getTeam() == 0) {
                g2d.setColor(Color.RED);
            } else {
                g2d.setColor(Color.BLUE);
            }
        }
        /*if (getTeam() == 0) {
            g2d.setColor(Color.RED);
        } else {
            g2d.setColor(Color.BLUE);
        }*/

        String knightHealth = Integer.toString(getHealth());

        int[] x = new int[3];
        x[0] = xtopleft;
        x[1] = xtopleft + 20;
        x[2] = xtopleft + 40;
        int[] y = new int[3];
        y[0] = ytopleft;
        y[1] = ytopleft + 40;
        y[2] = ytopleft;
        g2d.drawPolygon(x, y, 3);
        g2d.fillPolygon(x, y, 3);

        g.setColor(Color.WHITE);
        g.drawString(knightHealth, xtopleft + 7, ytopleft + 20);

        // TODO Auto-generated method stub
    }

    public boolean checkPosNormalAttack(Knight k, Knight e) {

        Rectangle rectK = new Rectangle(k.getxPos(), k.getyPos(), 40, 40);
        Rectangle rectE = new Rectangle(e.getxPos(), e.getyPos(), 40, 40);
        if (rectK.intersects(rectE)) {
            return true;
        }
        return false;
    }

    @Override
    public boolean meleeAttack() {
        if (this.getTeam() == 0) {

            if (this.getTarget() != null) {
                if (checkPosNormalAttack(this, this.getTarget()) && this.getFlag() == 0 && this.getTarget().getDead() == 0) {
                    this.setFlag(1);

                    if (this.getTarget().getHealth() <= 150) {
                        Simulation.getInstance().totalDamageK = Simulation.getInstance().totalDamageK + this.getTarget().getHealth();
                        this.getTarget().setHealth(0);
                        this.setScore(this.getScore() + 75);
                        if (Simulation.getInstance().highestPlayerK < this.getScore()) {
                            Simulation.getInstance().highestPlayerK = this.getScore();
                        }
                        Simulation.getInstance().setTotalScoreK(Simulation.getInstance().getTotalScoreK() + 75);
                    } else {
                        Simulation.getInstance().totalDamageK = Simulation.getInstance().totalDamageK + 150;
                        this.getTarget().setHealth(this.getTarget().getHealth() - 150);
                    }
                    if (this.getTarget().getHealth() <= 0) {
                        this.getTarget().setDead(1);
                        Display.getInstance().removeKnight(this.getTarget());
                        Simulation.getInstance().killsK = Simulation.getInstance().killsK + 1;
                        this.setTarget(null);
                    }
                    Simulation.getInstance().normSkillK++;
                    return true;
                }
            }
        }
        if (this.getTeam() == 1) {

            if (this.getTarget() != null) {
                if (checkPosNormalAttack(this, this.getTarget()) && this.getFlag() == 0 && this.getTarget().getDead() == 0) {
                    this.setFlag(1);
                    if (this.getTarget().getHealth() <= 150) {
                        Simulation.getInstance().totalDamageE = Simulation.getInstance().totalDamageE + this.getTarget().getHealth();
                        this.getTarget().setHealth(0);
                        this.setScore(this.getScore() + 75);
                        if (Simulation.getInstance().highestPlayerE < this.getScore()) {
                            Simulation.getInstance().highestPlayerE = this.getScore();
                        }
                        Simulation.getInstance().setTotalScoreE(Simulation.getInstance().getTotalScoreE() + 75);
                    } else {
                        Simulation.getInstance().totalDamageE = Simulation.getInstance().totalDamageE + 150;
                        this.getTarget().setHealth(this.getTarget().getHealth() - 150);
                    }
                    if (this.getTarget().getHealth() <= 0) {
                        this.getTarget().setDead(1);
                        Display.getInstance().removeKnight(this.getTarget());
                        Simulation.getInstance().killsE = Simulation.getInstance().killsE + 1;
                        this.setTarget(null);
                    }
                    Simulation.getInstance().normSkillE++;
                    return true;
                }
            }
        }
        return false;
    }

    @Override
    public boolean rangedAttack() {

        if (this.getTeam() == 0) {
            int distance = 4000;
            for (int i = 0; i < Simulation.getInstance().getElmoradList().size(); i++) {
                int xdist = abs(this.getxPos() - Simulation.getInstance().getElmoradList().get(i).getxPos());
                int ydist = abs(this.getyPos() - Simulation.getInstance().getElmoradList().get(i).getyPos());
                int sum = xdist + ydist;
                if (sum < distance && Simulation.getInstance().getElmoradList().get(i).getDead() == 0) {
                    distance = sum;
                    this.setTarget(Simulation.getInstance().getElmoradList().get(i));
                }
            }
            if (this.getTarget() != null && this.getTarget().getDead() == 0) {
                int x = this.getxPos() - this.getTarget().getxPos();
                int y = this.getyPos() - this.getTarget().getyPos();
                x = x * x;
                y = y * y;
                if (Math.sqrt(x + y) < 75) {
                    if (checkPosNormalAttack(this, this.getTarget()) && this.getFlag() == 0) {
                        this.setFlag(1);
                        this.setSpecialFlag(0);
                        specSkill = 0;

                        if (this.getTarget().getHealth() <= 250) {
                            Simulation.getInstance().totalDamageK = Simulation.getInstance().totalDamageK + this.getTarget().getHealth();
                            this.setScore(this.getScore() + 75);
                            this.getTarget().setHealth(0);
                            if (Simulation.getInstance().highestPlayerK < this.getScore()) {
                                Simulation.getInstance().highestPlayerK = this.getScore();
                            }
                            Simulation.getInstance().setTotalScoreK(Simulation.getInstance().getTotalScoreK() + 75);
                        } else {
                            Simulation.getInstance().totalDamageK = Simulation.getInstance().totalDamageK + 250;
                            this.getTarget().setHealth(this.getTarget().getHealth() - 250);
                        }

                        if (this.getTarget().getHealth() <= 0) {
                            this.getTarget().setDead(1);
                            Display.getInstance().removeKnight(this.getTarget());
                            Simulation.getInstance().killsK = Simulation.getInstance().killsK + 1;
                            this.setTarget(null);
                        }
                        Simulation.getInstance().speckSkillK++;
                        this.setSpeed(100);
                        return true;
                    } else {
                        specSkill = 1;
                        this.setSpeed(200);
                        this.setSpecialFlag(1);
                    }
                }

            }
        } else if (this.getTeam() == 1) {
            int distance = 4000;
            for (int i = 0; i < Simulation.getInstance().getKarusList().size(); i++) {
                int xdist = abs(this.getxPos() - Simulation.getInstance().getKarusList().get(i).getxPos());
                int ydist = abs(this.getyPos() - Simulation.getInstance().getKarusList().get(i).getyPos());
                int sum = xdist + ydist;
                if (sum < distance && Simulation.getInstance().getKarusList().get(i).getDead() == 0) {
                    distance = sum;
                    this.setTarget(Simulation.getInstance().getKarusList().get(i));
                }
            }
            if (this.getTarget() != null && this.getTarget().getDead() == 0) {
                int x = this.getxPos() - this.getTarget().getxPos();
                int y = this.getyPos() - this.getTarget().getyPos();
                x = x * x;
                y = y * y;
                if (Math.sqrt(x + y) < 75) {
                    if (checkPosNormalAttack(this, this.getTarget()) && this.getFlag() == 0) {
                        this.setFlag(1);
                        this.setSpecialFlag(0);
                        specSkill = 0;

                        if (this.getTarget().getHealth() <= 250) {
                            Simulation.getInstance().totalDamageE = Simulation.getInstance().totalDamageE + this.getTarget().getHealth();
                            this.setScore(this.getScore() + 75);
                            this.getTarget().setHealth(0);
                            if (Simulation.getInstance().highestPlayerE < this.getScore()) {
                                Simulation.getInstance().highestPlayerE = this.getScore();
                            }
                            Simulation.getInstance().setTotalScoreE(Simulation.getInstance().getTotalScoreE() + 75);
                        } else {
                            Simulation.getInstance().totalDamageE = Simulation.getInstance().totalDamageE + 250;
                            this.getTarget().setHealth(this.getTarget().getHealth() - 250);
                        }

                        if (this.getTarget().getHealth() <= 0) {
                            this.getTarget().setDead(1);
                            Display.getInstance().removeKnight(this.getTarget());
                            Simulation.getInstance().killsE = Simulation.getInstance().killsE + 1;
                            this.setTarget(null);
                        }
                        Simulation.getInstance().speckSkillE++;
                        this.setSpeed(100);
                        return true;
                    } else {
                        specSkill = 1;
                        this.setSpeed(200);
                        this.setSpecialFlag(1);
                    }
                }

            }
        }

        return false;
    }

    @Override
    public boolean healMe() {
        // TODO Auto-generated method stub
        if (500 - this.getHealth() < 75 && this.getHealth() != 500) {
            this.setHealth(this.getHealth() + (500 - this.getHealth()));
            return true;
        } else if (500 - this.getHealth() >= 75) {
            this.setHealth(this.getHealth() + 75);
            return true;
        }
        return false;
    }
}
