//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : @Knight Offline
//  @ File Name : Simulation.java
//  @ Date : @31.03.2015
//  @ Author : @Burak Araz
//
//

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import javax.imageio.ImageIO;

import javax.swing.*;

public class Simulation extends JPanel {

    public int speckSkillK;
    public int speckSkillE;
    public int normSkillK;
    public int normSkillE;
    
    public int highestPlayerK;
    public int highestPlayerE;

    public int totalScoreK;
    public int totalScoreE;
    public int killsK;
    public int killsE;
    public int totalDamageK;
    public int totalDamageE;

    public List<Knight> karusList = new ArrayList<Knight>();
    public List<Knight> elmoradList = new ArrayList<Knight>();

    private Team karus;
    private Team elmorad;

    static Graphics g;

    public static int id = 0;

    private static Simulation instance;

    public synchronized static Simulation getInstance() {
        if (instance == null) {
            instance = new Simulation();
        }
        return instance;
    }

    public void generateMage(int team, int id) {
        SoldierFactory sf = new MageFactory();
        sf.produce(team, id);
    }

    public void generateRogue(int team, int id) {
        SoldierFactory sf = new RogueFactory();
        sf.produce(team, id);
    }

    public void generatePriest(int team, int id) {
        SoldierFactory sf = new PriestFactory();
        sf.produce(team, id);
    }

    public Display display;
    public Knight knights;

    public static void main(String[] args) {

        Display.getInstance(Simulation.getInstance());
        Simulation.getInstance().randomTypeGeneratorKarus();
        Simulation.getInstance().randomTypeGeneratorElMorad();

        while (true) {
            try {
                Thread.sleep(40);
                Display.getInstance().repaint();
                Simulation.getInstance().checkDecorate();
                Simulation.getInstance().stepAll();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }

    }

    @Override
    public Dimension getPreferredSize() {
        return new Dimension(1100, 800); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g); //To change body of generated methods, choose Tools | Templates.
        Image img = null;
        try {
            img = ImageIO.read(new File("src/images/knight.jpg"));
        } catch (IOException e) {
            e.printStackTrace();
        }
        g.drawImage(img, 0, 0, 1100, 800, null);
        for (int i = 0; i < Simulation.getInstance().getKarusList().size(); i++) {
            Simulation.getInstance().getKarusList().get(i).draw(g);
        }
        for (int i = 0; i < Simulation.getInstance().getElmoradList().size(); i++) {
            Simulation.getInstance().getElmoradList().get(i).draw(g);
        }
    }

    public void checkDecorate() {

        for (int i = 0; i < Simulation.getInstance().getKarusList().size(); i++) {
            if (Simulation.getInstance().getKarusList().get(i).getScore() < 76) {
                
                Knight knight = new NoobDecorator(Simulation.getInstance().getKarusList().get(i));
                Simulation.getInstance().getKarusList().set(i, knight);
                
            } else if (Simulation.getInstance().getKarusList().get(i).getScore() < 151
                    && Simulation.getInstance().getKarusList().get(i).getScore() > 75) {
                
                Knight knight = new Grade3Decorator(Simulation.getInstance().getKarusList().get(i));
                Simulation.getInstance().getKarusList().set(i, knight);

            } else if (Simulation.getInstance().getKarusList().get(i).getScore() > 150
                    && Simulation.getInstance().getKarusList().get(i).getScore() < 301) {
                
                Knight knight = new Grade2Decorator(Simulation.getInstance().getKarusList().get(i));
                Simulation.getInstance().getKarusList().set(i, knight);

            } else if (Simulation.getInstance().getKarusList().get(i).getScore() > 300) {
                
                Knight knight = new Grade1Decorator(Simulation.getInstance().getKarusList().get(i));
                Simulation.getInstance().getKarusList().set(i, knight);
                
            }
        }

        for (int i = 0; i < Simulation.getInstance().getElmoradList().size(); i++) {
            if (Simulation.getInstance().getElmoradList().get(i).getScore() < 76) {
                
                Knight knight = new NoobDecorator(Simulation.getInstance().getElmoradList().get(i));
                Simulation.getInstance().getElmoradList().set(i, knight);
                
            }
            else if (Simulation.getInstance().getElmoradList().get(i).getScore() < 151
                    && Simulation.getInstance().getElmoradList().get(i).getScore() > 75) {
                
                Knight knight = new Grade3Decorator(Simulation.getInstance().getElmoradList().get(i));
                Simulation.getInstance().getElmoradList().set(i, knight);
                
            } else if (Simulation.getInstance().getElmoradList().get(i).getScore() > 150
                    && Simulation.getInstance().getElmoradList().get(i).getScore() < 301) {
                
                Knight knight = new Grade2Decorator(Simulation.getInstance().getElmoradList().get(i));
                Simulation.getInstance().getElmoradList().set(i, knight);

            } else if (Simulation.getInstance().getElmoradList().get(i).getScore() > 300) {
                
                Knight knight = new Grade1Decorator(Simulation.getInstance().getElmoradList().get(i));
                Simulation.getInstance().getElmoradList().set(i, knight);
            }
        }

    }

    public boolean checkPosNormalAttack(Knight k, Knight e) {

        Rectangle rectK = new Rectangle(k.getxPos(), k.getyPos(), 40, 40);
        Rectangle rectE = new Rectangle(e.getxPos(), e.getyPos(), 40, 40);
        if (rectK.intersects(rectE)) {
            return true;
        }
        return false;
    }

    public void stepAll() {
        for (int i = 0; i < Simulation.getInstance().karusList.size(); i++) {
            Simulation.getInstance().karusList.get(i).act();
            if (Simulation.getInstance().karusList.get(i).getFlag() == 1) {
                Simulation.getInstance().karusList.get(i).setTimer(Simulation.getInstance().karusList.get(i).getTimer() + 1);
            }
            if (Simulation.getInstance().karusList.get(i).getTimer() == 25) {
                Simulation.getInstance().karusList.get(i).setFlag(0);
                Simulation.getInstance().karusList.get(i).setTimer(0);
            }
            if (Simulation.getInstance().karusList.get(i).getSpecialFlag() == 0) {
                Simulation.getInstance().karusList.get(i).setStratTimer(Simulation.getInstance().karusList.get(i).getStratTimer() + 1);
            }
            if (Simulation.getInstance().karusList.get(i).getStratTimer() == 25) {
                Random rand = new Random();
                int timer = rand.nextInt(3);
                if (timer == 0) {
                    Strategy move = new MoveRandomly();
                    Simulation.getInstance().karusList.get(i).setStrategy(move);
                } else if (timer == 1) {
                    Strategy move = new AttackClosest();
                    Simulation.getInstance().karusList.get(i).setStrategy(move);
                } else if (timer == 2) {
                    Strategy move = new AttackWeakest();
                    Simulation.getInstance().karusList.get(i).setStrategy(move);
                }
                Simulation.getInstance().karusList.get(i).setStratTimer(0);
            }
        }

        for (int i = 0; i < Simulation.getInstance().elmoradList.size(); i++) {
            Simulation.getInstance().elmoradList.get(i).act();
            if (Simulation.getInstance().elmoradList.get(i).getFlag() == 1) {
                Simulation.getInstance().elmoradList.get(i).setTimer(Simulation.getInstance().elmoradList.get(i).getTimer() + 1);
            }
            if (Simulation.getInstance().elmoradList.get(i).getTimer() == 25) {
                Simulation.getInstance().elmoradList.get(i).setFlag(0);
                Simulation.getInstance().elmoradList.get(i).setTimer(0);
            }
            if (Simulation.getInstance().elmoradList.get(i).getSpecialFlag() == 0) {
                Simulation.getInstance().elmoradList.get(i).setStratTimer(Simulation.getInstance().elmoradList.get(i).getStratTimer() + 1);
            }
            if (Simulation.getInstance().elmoradList.get(i).getStratTimer() == 25 && Simulation.getInstance().elmoradList.get(i).getSpecialFlag() == 0) {
                Random rand = new Random();
                int timer = 1;//rand.nextInt(3);
                if (timer == 0) {
                    Strategy move = new MoveRandomly();
                    Simulation.getInstance().elmoradList.get(i).setStrategy(move);
                } else if (timer == 1) {
                    Strategy move = new AttackClosest();
                    Simulation.getInstance().elmoradList.get(i).setStrategy(move);
                } else if (timer == 2) {
                    Strategy move = new AttackWeakest();
                    Simulation.getInstance().elmoradList.get(i).setStrategy(move);
                }
                Simulation.getInstance().elmoradList.get(i).setStratTimer(0);
            }
        }
    }

    public void randomTypeGeneratorKarus() {  // 0 means KARUS
        Random rand = new Random();
        for (int i = 0; i < 8; i++) {
            int type = rand.nextInt(3);
            if (type == 1) {
                Simulation.getInstance().generateMage(0, id);
                id++;
            } else if (type == 0) {
                Simulation.getInstance().generateRogue(0, id);
                id++;
            } else {
                Simulation.getInstance().generatePriest(0, id);
                id++;
            }
        }
    }

    public void randomTypeGeneratorElMorad() { // 1 means El Morad
        Random rand = new Random();

        for (int i = 0; i < 8; i++) {
            int type = rand.nextInt(3);
            if (type == 1) {
                Simulation.getInstance().generateMage(1, id);
                id++;
            } else if (type == 0) {
                Simulation.getInstance().generateRogue(1, id);
                id++;
            } else {
                Simulation.getInstance().generatePriest(1, id);
                id++;
            }
        }
    }

    /**
     * @return the karus
     */
    public Team getKarus() {
        return karus;
    }

    /**
     * @param karus the karus to set
     */
    public void setKarus(Team karus) {
        this.karus = karus;
    }

    /**
     * @return the elmorad
     */
    public Team getElmorad() {
        return elmorad;
    }

    /**
     * @param elmorad the elmorad to set
     */
    public void setElmorad(Team elmorad) {
        this.elmorad = elmorad;
    }

    /**
     * @return the karusList
     */
    public List<Knight> getKarusList() {
        return karusList;
    }

    /**
     * @param karusList the karusList to set
     */
    public void setKarusList(List<Knight> karusList) {
        this.karusList = karusList;
    }

    /**
     * @return the elmoradList
     */
    public List<Knight> getElmoradList() {
        return elmoradList;
    }

    /**
     * @param elmoradList the elmoradList to set
     */
    public void setElmoradList(List<Knight> elmoradList) {
        this.elmoradList = elmoradList;
    }

    /**
     * @return the totalScoreK
     */
    public int getTotalScoreK() {
        return totalScoreK;
    }

    /**
     * @param totalScoreK the totalScoreK to set
     */
    public void setTotalScoreK(int totalScoreK) {
        this.totalScoreK = totalScoreK;
    }

    /**
     * @return the totalScoreE
     */
    public int getTotalScoreE() {
        return totalScoreE;
    }

    /**
     * @param totalScoreE the totalScoreE to set
     */
    public void setTotalScoreE(int totalScoreE) {
        this.totalScoreE = totalScoreE;
    }

    /**
     * @return the killsK
     */
    public int getKillsK() {
        return killsK;
    }

    /**
     * @param killsK the killsK to set
     */
    public void setKillsK(int killsK) {
        this.killsK = killsK;
    }

    /**
     * @return the killsE
     */
    public int getKillsE() {
        return killsE;
    }

    /**
     * @param killsE the killsE to set
     */
    public void setKillsE(int killsE) {
        this.killsE = killsE;
    }

    /**
     * @return the totalDamageK
     */
    public int getTotalDamageK() {
        return totalDamageK;
    }

    /**
     * @param totalDamageK the totalDamageK to set
     */
    public void setTotalDamageK(int totalDamageK) {
        this.totalDamageK = totalDamageK;
    }

    /**
     * @return the totalDamageE
     */
    public int getTotalDamageE() {
        return totalDamageE;
    }

    /**
     * @param totalDamageE the totalDamageE to set
     */
    public void setTotalDamageE(int totalDamageE) {
        this.totalDamageE = totalDamageE;
    }
}
