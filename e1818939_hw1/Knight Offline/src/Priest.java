
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;

import static java.lang.Math.abs;

import java.util.ArrayList;
import java.util.Timer;

import javax.swing.JComponent;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : @Knight Ofline
//  @ File Name : Priest.java
//  @ Date : @31.03.2015
//  @ Author : @Burak Araz
//
//
public class Priest extends BasicKnight {

    public int specFlag = 0;

    public Priest(int id, int xPos, int yPos, int hitPoint, int score,
            int speed, int health, Strategy strategy, int team, int type, Knight target) {
        super(id, xPos, yPos, hitPoint, score, speed, health, strategy, team, type, target);
        // TODO Auto-generated constructor stub
    }

    @Override
    public void draw(Graphics g) {
        // TODO Auto-generated method stub
        Graphics2D g2d = (Graphics2D) g.create();
        int xtopleft = this.getxPos();
        int ytopleft = this.getyPos();

        if (getTeam() == 0) {
            g2d.setColor(Color.RED);
        } else {
            g2d.setColor(Color.BLUE);
        }
        String knightHealth = Integer.toString(getHealth());
        g2d.drawOval(xtopleft - 15, ytopleft - 15, 75, 75);
        g2d.drawRect(xtopleft, ytopleft, 40, 40);
        g2d.fillRect(xtopleft, ytopleft, 40, 40);

        g.setColor(Color.WHITE);
        g.drawString(knightHealth, xtopleft + 10, ytopleft + 20);

        if (specFlag == 1) {
            specFlag = 0;
            Color color = new Color(0, 1, 0, 0.8f); //Red 
            g2d.setColor(color);
            g2d.drawOval(xtopleft - 15, ytopleft - 15, 75, 75);
            g2d.fillOval(xtopleft - 15, ytopleft - 15, 75, 75);
        }

    }

    public boolean checkPosNormalAttack(Knight k, Knight e) {

        Rectangle rectK = new Rectangle(k.getxPos(), k.getyPos(), 40, 40);
        Rectangle rectE = new Rectangle(e.getxPos(), e.getyPos(), 40, 40);
        if (rectK.intersects(rectE)) {
            return true;
        }
        return false;
    }

    @Override
    public boolean meleeAttack() {
        if (this.getTeam() == 0) {
            if (this.getTarget() != null) {
                if (checkPosNormalAttack(this, this.getTarget()) && this.getFlag() == 0 && this.getTarget().getDead() == 0) {
                    this.setFlag(1);

                    if (this.getTarget().getHealth() <= 150) {
                        Simulation.getInstance().totalDamageK = Simulation.getInstance().totalDamageK + this.getTarget().getHealth();
                        this.getTarget().setHealth(0);
                        this.setScore(this.getScore() + 75);
                        if (Simulation.getInstance().highestPlayerK < this.getScore()) {
                            Simulation.getInstance().highestPlayerK = this.getScore();
                        }
                        Simulation.getInstance().setTotalScoreK(Simulation.getInstance().getTotalScoreK() + 75);
                    } else {
                        Simulation.getInstance().totalDamageK = Simulation.getInstance().totalDamageK + 150;
                        this.getTarget().setHealth(this.getTarget().getHealth() - 150);
                    }
                    if (this.getTarget().getHealth() <= 0) {
                        this.getTarget().setDead(1);
                        Display.getInstance().removeKnight(this.getTarget());
                        Simulation.getInstance().killsK = Simulation.getInstance().killsK + 1;
                        this.setTarget(null);
                    }
                    Simulation.getInstance().normSkillK++;
                    return true;
                }
            }
        }
        if (this.getTeam() == 1) {
            if (this.getTarget() != null) {
                if (checkPosNormalAttack(this, this.getTarget()) && this.getFlag() == 0 && this.getTarget().getDead() == 0) {
                    this.setFlag(1);

                    if (this.getTarget().getHealth() <= 150) {
                        Simulation.getInstance().totalDamageE = Simulation.getInstance().totalDamageE + this.getTarget().getHealth();
                        this.getTarget().setHealth(0);
                        this.setScore(this.getScore() + 75);
                        if (Simulation.getInstance().highestPlayerE < this.getScore()) {
                            Simulation.getInstance().highestPlayerE = this.getScore();
                        }
                        Simulation.getInstance().setTotalScoreE(Simulation.getInstance().getTotalScoreE() + 75);
                    } else {
                        Simulation.getInstance().totalDamageE = Simulation.getInstance().totalDamageE + 150;
                        this.getTarget().setHealth(this.getTarget().getHealth() - 150);
                    }

                    if (this.getTarget().getHealth() <= 0) {
                        this.getTarget().setDead(1);
                        Display.getInstance().removeKnight(this.getTarget());
                        Simulation.getInstance().killsE = Simulation.getInstance().killsE + 1;
                        this.setTarget(null);
                    }
                    Simulation.getInstance().normSkillE++;
                    return true;
                }
            }
        }
        return false;
    }

    @Override
    public boolean rangedAttack() {
        ArrayList<Knight> healList = new ArrayList<Knight>();
        if (this.getTeam() == 0) {
            for (int i = 0; i < Simulation.getInstance().getKarusList().size(); i++) {
                int xdist = this.getxPos() - Simulation.getInstance().getKarusList().get(i).getxPos();
                int ydist = this.getyPos() - Simulation.getInstance().getKarusList().get(i).getyPos();
                xdist = xdist * xdist;
                ydist = ydist * ydist;
                if (Math.sqrt(xdist + ydist) < 100) {
                    healList.add(Simulation.getInstance().getKarusList().get(i));
                }
            }
            if (healList.size() != 0 && this.getFlag() == 0) {

                for (int i = 0; i < healList.size(); i++) {
                    if (healList.get(i).healMe()) {
                        specFlag = 1;
                        this.setFlag(1);
                    }
                }
                return true;
            }
        } else if (this.getTeam() == 1) {
            for (int i = 0; i < Simulation.getInstance().getElmoradList().size(); i++) {
                int xdist = this.getxPos() - Simulation.getInstance().getElmoradList().get(i).getxPos();
                int ydist = this.getyPos() - Simulation.getInstance().getElmoradList().get(i).getyPos();
                xdist = xdist * xdist;
                ydist = ydist * ydist;
                if (Math.sqrt(xdist + ydist) < 100) {
                    healList.add(Simulation.getInstance().getElmoradList().get(i));
                }
            }
            if (healList.size() != 0 && this.getFlag() == 0) {

                for (int i = 0; i < healList.size(); i++) {

                    if (healList.get(i).healMe()) {
                        specFlag = 1;
                        this.setFlag(1);
                    }
                }
                return true;
            }
        }
        return false;
    }

    @Override
    public boolean healMe() {
        // TODO Auto-generated method stub

        if (350 - this.getHealth() < 75 && this.getHealth() != 350) {
            this.setHealth(this.getHealth() + (350 - this.getHealth()));
            return true;
        } else if (350 - this.getHealth() >= 75) {
            this.setHealth(this.getHealth() + 75);
            return true;
        }

        return false;
    }
}
